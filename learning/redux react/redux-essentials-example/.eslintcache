[{"C:\\Users\\bhushan.kadu\\Documents\\Bhushan Workspace\\learning\\redux react\\redux-essentials-example\\src\\index.js":"1","C:\\Users\\bhushan.kadu\\Documents\\Bhushan Workspace\\learning\\redux react\\redux-essentials-example\\src\\App.js":"2","C:\\Users\\bhushan.kadu\\Documents\\Bhushan Workspace\\learning\\redux react\\redux-essentials-example\\src\\serviceWorker.js":"3","C:\\Users\\bhushan.kadu\\Documents\\Bhushan Workspace\\learning\\redux react\\redux-essentials-example\\src\\app\\store.js":"4","C:\\Users\\bhushan.kadu\\Documents\\Bhushan Workspace\\learning\\redux react\\redux-essentials-example\\src\\features\\counter\\counterSlice.js":"5","C:\\Users\\bhushan.kadu\\Documents\\Bhushan Workspace\\learning\\redux react\\redux-essentials-example\\src\\features\\counter\\Counter.js":"6"},{"size":644,"mtime":499162500000,"results":"7","hashOfConfig":"8"},{"size":1463,"mtime":1610105415466,"results":"9","hashOfConfig":"8"},{"size":5141,"mtime":499162500000,"results":"10","hashOfConfig":"8"},{"size":206,"mtime":1610107024105,"results":"11","hashOfConfig":"8"},{"size":1562,"mtime":1610107039611,"results":"12","hashOfConfig":"8"},{"size":1639,"mtime":1610166937277,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"5katqt",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"25","usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"28"},"C:\\Users\\bhushan.kadu\\Documents\\Bhushan Workspace\\learning\\redux react\\redux-essentials-example\\src\\index.js",[],["29","30"],"C:\\Users\\bhushan.kadu\\Documents\\Bhushan Workspace\\learning\\redux react\\redux-essentials-example\\src\\App.js",[],"C:\\Users\\bhushan.kadu\\Documents\\Bhushan Workspace\\learning\\redux react\\redux-essentials-example\\src\\serviceWorker.js",[],"C:\\Users\\bhushan.kadu\\Documents\\Bhushan Workspace\\learning\\redux react\\redux-essentials-example\\src\\app\\store.js",[],"C:\\Users\\bhushan.kadu\\Documents\\Bhushan Workspace\\learning\\redux react\\redux-essentials-example\\src\\features\\counter\\counterSlice.js",["31"],"import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState: {\r\n    value: 0,\r\n  },\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment: increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = amount => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectCount = state => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","C:\\Users\\bhushan.kadu\\Documents\\Bhushan Workspace\\learning\\redux react\\redux-essentials-example\\src\\features\\counter\\Counter.js",["32"],"import React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {\r\n  decrement,\r\n  increment as increment,\r\n  incrementByAmount,\r\n  incrementAsync,\r\n  selectCount,\r\n} from './counterSlice';\r\nimport styles from './Counter.module.css';\r\n\r\nexport function Counter() {\r\n  const count = useSelector(selectCount);\r\n  const dispatch = useDispatch();\r\n  const [incrementAmount, setIncrementAmount] = useState('2');\r\n\r\n  return (\r\n    <div>\r\n      <div className={styles.row}>\r\n        <button\r\n          className={styles.button}\r\n          aria-label=\"Increment value\"\r\n          onClick={() => dispatch(increment())}\r\n        >\r\n          +\r\n        </button>\r\n        <span className={styles.value}>{count}</span>\r\n        <button\r\n          className={styles.button}\r\n          aria-label=\"Decrement value\"\r\n          onClick={() => dispatch(decrement())}\r\n        >\r\n          -\r\n        </button>\r\n      </div>\r\n      <div className={styles.row}>\r\n        <input\r\n          className={styles.textbox}\r\n          aria-label=\"Set increment amount\"\r\n          value={incrementAmount}\r\n          onChange={e => setIncrementAmount(e.target.value)}\r\n        />\r\n        <button\r\n          className={styles.button}\r\n          onClick={() =>\r\n            dispatch(incrementByAmount(Number(incrementAmount) || 5))\r\n          }\r\n        >\r\n          Add Amount\r\n        </button>\r\n        <button\r\n          className={styles.asyncButton}\r\n          onClick={() => dispatch(incrementAsync(Number(incrementAmount) || 0))}\r\n        >\r\n          Add Async\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n",{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":25,"column":16,"nodeType":"39","messageId":"40","endLine":25,"endColumn":36,"fix":"41"},{"ruleId":"37","severity":1,"message":"42","line":5,"column":3,"nodeType":"43","messageId":"40","endLine":5,"endColumn":25,"fix":"44"},"no-native-reassign",["45"],"no-negated-in-lhs",["46"],"no-useless-rename","Destructuring assignment increment unnecessarily renamed.","Property","unnecessarilyRenamed",{"range":"47","text":"48"},"Import increment unnecessarily renamed.","ImportSpecifier",{"range":"49","text":"48"},"no-global-assign","no-unsafe-negation",[689,709],"increment",[125,147]]