@{
    ViewBag.Title = "Home Page";
}
@model ContactsPage.Models.ContactListViewModel

<div class="pnlHeader">
    <div style="font-size: 1.3em; color: #00008b; font-weight: bold;">Contact List</div>
    <button id="btnGridFetch">Fetch</button>
    <button id="btnGridDelete">Delete</button>
    <button id="btnGridAdd">Add</button>
    <button id="btnFilterClear">Clear</button>
    <button id="btnGridClose">Close</button>
</div>

<div style="padding: 7px 10px 1px 10px; ">
    <div class="pnlFilters">

        <div class="form-field">
            <div class="form-field-label">
                <div>
                    DOB From Date
                    <div class="requiredStar">*</div>
                </div>
            </div>
            <div class="form-field-input">
                <input id="dtpFilterDateOfBirthFrom" required>
            </div>
        </div>
        <div class="form-field">
            <div class="form-field-label">
                <div>
                    DOB To Date
                    <div class="requiredStar">*</div>
                </div>

            </div>
            <div class="form-field-input">
                <input id="dtpFilterDateOfBirthTo" required>
            </div>
        </div>

        <div class="form-field" style="flex: 2;">
            <div class="form-field-label">
                <div>
                    Contact Name
                </div>

            </div>
            <div class="form-field-input">
                <input id="ddlFilterFullName" type="text">
            </div>
        </div>

        <div class="form-field" style="flex: 2;">
            <div class="form-field-label">
                <div>Country</div>
            </div>
            <div class="form-field-input">
                <input type="text" id="ddlFilterCountry">
            </div>
        </div>

        <div class="form-field" style="flex: 2;">
            <div class="form-field-label">
                <div>State</div>
            </div>
            <div class="form-field-input">
                <select id="ddlFilterState"></select>
            </div>
        </div>
    </div>

    <div id="grdContactsList"></div>
</div>


<div id="dlgConfirmDelete"></div>

<div id="pnlAddContact">
    <div class="form-field">
        <div class="form-field-label">
            <div>
                First Name:
                <div class="requiredStar">*</div>
            </div>
        </div>
        <div class="form-field-input k-textbox">
            <input type="text" id="txtFirstName" name="firstName" max="15" maxlength="15" required>
        </div>
    </div>

    <div class="form-field">
        <div class="form-field-label">
            <div>
                Last Name:
                <div class="requiredStar">*</div>
            </div>

        </div>
        <div class="form-field-input k-textbox">
            <input type="text" id="txtLastName" name="lastName" max="15" maxlength="15" required>
        </div>
    </div>

    <div class="form-field">
        <div class="form-field-label">
            <div>
                Date of Birth:
                <div class="requiredStar">*</div>
            </div>

        </div>
        <div class="form-field-input">
            <input id="dtpAddContactDateOfBirth" name="dob" required>
        </div>
    </div>

    <div class="form-field">
        <div class="form-field-label">
            <div>
                Country:
                <div class="requiredStar">*</div>
            </div>

        </div>
        <div class="form-field-input">
            <input type="text" id="ddlAddContactCountry" name="country" required>
        </div>
    </div>

    <div class="form-field">
        <div class="form-field-label">
            <div>State:</div>
        </div>
        <div class="form-field-input">
            <input id="ddlAddContactState" name="state">
        </div>
    </div>

    <div class="form-field">
        <div class="form-field-label">
            <div>
                Email:
                <div class="requiredStar">*</div>
            </div>

        </div>
        <div class="form-field-input k-textbox">
            <input type="email" id="txtEmail" required name="emailId">
        </div>
    </div>

    <div class="form-field">
        <div class="form-field-label">
            <div>
                Phone:
                <div class="requiredStar">*</div>
            </div>

        </div>
        <div class="form-field-input k-textbox">
            <input type="tel" pattern="[0-9]{10}" max="10" min="10" maxlength="10" id="txtPhone" required name="phone">
        </div>
    </div>

    <button id="btnContactFormSubmit" onclick="btnContactFormSubmit_click(event)" class="k-primary">Submit</button>
    <button id="btnContactFormUpdate" onclick="btnContactFormUpdate_click(event)" class="k-primary">Update</button>
</div>

<div id="dlgAddContactFailure"></div>
<div id="dlgAddContactSuccess"></div>
<script>

    //20 asian countries
    let countryList = new kendo.data.DataSource({
        transport: {
            read: {
                url: "https://localhost:44394/api/country",
                dataTye: "jsonp"
            }
        }
    });

    jQuery(function () {
        /*------------------------- start of actions panel --------------------------*/
        $('#btnGridFetch').kendoButton({
            click: btnGridFetch_click
        });
        $('#btnGridDelete').kendoButton({
            click: btnGridDelete_click
        });
        $('#btnGridAdd').kendoButton({
            click: function (event) {
                $('#pnlAddContact').data('kendoWindow').title("Add New Contact").center().open();
                $('#btnContactFormUpdate').hide()
                $('#btnContactFormSubmit').show();
            }
        });
        $('#btnFilterClear').kendoButton({
            click: btnGridClear_click
        });
        $('#btnGridClose').kendoButton();

        //confirm delete dialog
        $('#dlgConfirmDelete').kendoDialog({
            title: 'Confirm',
            width: '400px',
            content: 'You are deleting 1 item. Are You Sure?',
            buttonLayout: 'normal',
            actions: [
                { text: 'Yes', action: dlgConfirmDelete_Yes_click },
                { text: 'No' }
            ],
            visible: false
        })

        /*------------------------- end of actions panel -------------------------*/

        /*------------------------- start of filter header ----------------------------*/
        //get 18 year back date
        let dateObjToday = (new Date());
        let before18Year = dateObjToday.getFullYear() - 18;
        let dateToday = dateObjToday.getDate();

        //date of birth input date for only 18+
        $('#dtpFilterDateOfBirthFrom').kendoDatePicker({
            max: new Date(before18Year, dateObjToday.getDate()),
            value: new Date(before18Year - 10, dateToday),
            footer: "&nbsp",
            format: 'dd-MM-yyyy'
        });

        //date of birth input date for only 18+
        $('#dtpFilterDateOfBirthTo').kendoDatePicker({
            max: new Date(before18Year, dateObjToday.getDate()),
            value: new Date(before18Year, dateToday),
            footer: "&nbsp",
            format: 'dd-MM-yyyy'
        });

        $('#ddlFilterFullName').kendoAutoComplete();

        $('#ddlFilterCountry').kendoAutoComplete({
            dataSource: countryList,
            change: ddlFilterCountry_change
        });

        $('#ddlFilterState').kendoDropDownList();

        /*------------------------- end of filter header -----------------------------*/
        /*------------------------- start of grid ------------------------------------*/
        let allContactsKendoDatasource = new kendo.data.DataSource({
            transport: {
                read: {
                    url: "https://localhost:44394/api/contacts",
                    dataType: "json",
                    type: 'GET'
                },
                create: {
                    url: "https://localhost:44394/api/contacts",
                    dataType: "json",
                    type: "POST"
                },
                update: {
                    url: "https://localhost:44394/api/contacts",
                    dataType: "json",
                    type: "PUT"
                },
                destroy: {
                    url: "https://localhost:44394/api/contacts",
                    dataType: "json",
                    type: "DELETE"
                },
                parameterMap: function (data, type) {

                    if (type !== "read" && data.models) {
                        //if create or update only single row data is returned
                        if (type == "create" || type == "update") {
                            data.models[0].dob = data.models[0].dob.toISOString();
                            return data.models[0];
                        }
                        //for destroy data of all the selected rows is returend
                        else if (type == "destroy") {
                            $.each(data.models, function (index, model) {
                                model.dob = model.dob.toISOString();
                            });
                            return { Contacts: data.models };
                        }
                    }
                }
            },
            pageSize: 18,

            //batch: true sends the added/updated/deleted rows data in bulk
            //batch: false sends added/updated/deleted row data one by one 
            batch: true,

            //autosync: true syncs the datastore as soon as something in datastore changes
            //autosync: false syncs data whenever datstore,sync() is called
            autoSync: false,
            schema: {
                model: {
                    id: "contactId",
                    fields: {
                        contactId: { type: "number" },
                        firstName: { type: "string" },
                        lastName: { type: "string" },
                        dob: {
                            type: "date",
                            format: "dd-MM-yyyy"
                        },
                        country: { type: "string" },
                        state: { type: "string" },
                        emailId: { type: "string" },
                        phone: { type: "number" }
                    }
                }
            },
            change: grdContactsList_dataSourceChange
        });

        let runtimeGridHeight = $(window).height() - 155;
        $("#grdContactsList").kendoGrid({
            columns: [{
                selectable: true,
                width: '6.5em',
                headerTemplate: '<a class="k-link">Sel.</a>'
            },
            {
                field: "firstName",
                title: "First Name"
            },
            {
                field: "lastName",
                title: "Last Name"
            },
            {
                field: "dob",
                title: "DOB",
                width: '10em',
                format: "{0:dd-MM-yyyy}"
            },
            {
                field: "country",
                title: "Country",
                width: '17em'
            },
            {
                field: "state",
                title: "State"
            },
            {
                field: "emailId",
                title: "Email Id",
                width: '25em'
            },
            {
                field: "phone",
                title: "Phone No",
                width: '16em'
            }
            ],
            dataSource: allContactsKendoDatasource,
            columnMenu: true,
            sortable: true,
            filterable: true,
            pageable: {
                pageSize: 18
            },
            height: runtimeGridHeight,
            dataBound: grdContactsList_dataBound
        });

        //fetch grid with defaults
        btnGridFetch_click();

        /*------------------------- end of grid -----------------------------------*/

        /*----------------------- start of Add/update contact window----------------*/

        //add contact window widgets

        //failure dialog
        $("#dlgAddContactFailure").kendoDialog({
            title: "Alert!",
            closable: true,
            content: "Please Enter proper values",
            actions: [{ text: "ok" }],
            visible: false,
            width: '400px',
            buttonLayout: 'normal'
        });

        //Success dialog
        $("#dlgAddContactSuccess").kendoDialog({
            title: "Success",
            closable: true,
            actions: [{ text: "ok" }],
            visible: false,
            width: '400px',
            buttonLayout: 'normal'
        });

        //get 18 year back date
        before18Year = dateObjToday.getFullYear() - 18;

        //date of birth input date for only 18+
        $('#dtpAddContactDateOfBirth').kendoDatePicker({
            max: new Date(before18Year, dateObjToday.getDate()),
            footer: "&nbsp",
            format: 'dd-MM-yyyy'
        });


        //add contact country autocomplete widget
        $('#ddlAddContactCountry').kendoAutoComplete({
            dataSource: countryList,
            change: ddlAddContactCountry_change
        });

        //add contact state ddl
        $('#ddlAddContactState').kendoDropDownList();

        //add/update contact window
        $('#pnlAddContact').kendoWindow({
            width: "400px",
            title: 'Add New Contact',
            visible: false,
            close: function () {
                clearContactForm();
            }
        }).data('kendoWindow').center();

        $('#btnContactFormSubmit').kendoButton()
        $('#btnContactFormUpdate').kendoButton()

        /*------------------------- end of Add/update contact window---------------------*/
    });

    //delete confirmation dialog
    function dlgConfirmDelete_Yes_click(event) {
        let grid = $("#grdContactsList").data('kendoGrid');
        let selectedRows = grid.select();
        $.each(selectedRows, function (row) {
            grid.removeRow(selectedRows[row]);
        })
        grid.dataSource.sync();
    }


    //set full name array to full name auto complete filter
    function grdContactsList_dataSourceChange(event) {

        let fullNameArray = [];
        let grid = $("#grdContactsList").data('kendoGrid');
        let gridData = grid.dataSource.data();

        $.each(gridData, function (itr) {
            let dataItem = gridData[itr];
            let fullName = dataItem.firstName + " " + dataItem.lastName;
            if ($.inArray(fullName, fullNameArray) === -1) {
                fullNameArray.push(fullName);
            }
        })

        $('#ddlFilterFullName').data('kendoAutoComplete').setDataSource(fullNameArray);

    }

    //main panel delete button click
    function btnGridDelete_click() {
        let dialog = $('#dlgConfirmDelete').data('kendoDialog');
        let grid = $("#grdContactsList").data('kendoGrid');
        let rowsSelected = grid.select().length

        if (rowsSelected > 0) {
            dialog.content('<b>You are deleting ' + rowsSelected + ' items. Are You Sure?</b>');
            dialog.open();
        }
    }

    //intialize state widget when in update contact mode
    function initializeUpdateContactStates(country, stateName) {
        let stateWidget = $('#ddlAddContactState').data('kendoDropDownList');
        $.get("../api/State/?countryName=" + country, function (data, status) {
            populateStatesOptions(data, stateWidget, stateName);
        });
    }



    //if country is empty then make state ddl empty
    function ddlFilterCountry_change(ui) {

        let item = ui.sender;
        let stateWidget = $('#ddlFilterState').data('kendoDropDownList');

        if (item.value().trim() === "") {
            stateWidget.value("");
            stateWidget.dataSource.data([]);
        } else {
            let stateWidget = $('#ddlFilterState').data('kendoDropDownList');
            let country = item.value().trim()
            $.get("../api/State/?countryName=" + country, function (data, status) {
                populateStatesOptions(data, stateWidget);
            });
        }
    }

    //trigger function after country value is selected in autocomplete
    //country widget
    function ddlAddContactCountry_change(ui) {

        let item = ui.sender;
        let stateWidget = $('#ddlAddContactState').data('kendoDropDownList');

        let country = item.value().trim();
        $.get("../api/State/?countryName=" + country, function (data, status) {
            populateStatesOptions(data, stateWidget);
        });

    }

    /*
        trigger country select function which appends state options to
        select widget of country
        parameter 1 - object having country and state array
        parameter 2 - input country
        parameter 3 - state widget to be initialized
        parameter 4 - state name to sellect (dont send if not want to select)
    */
    function populateStatesOptions(countryStatesObj, stateWidget, stateName) {

        stateWidget.setDataSource(countryStatesObj.states);

        if (stateName !== undefined) {
            stateIndex = stateWidget.dataSource.options.data.findIndex(function (data) {
                return data === stateName
            })
            stateWidget.select(stateIndex);
        }
    }

    //submit method of add contact
    function btnContactFormSubmit_click(event) {


        let formObj = $('#pnlAddContact');
        let data = getAllDataFromForm(formObj);
        let errorMessage = validateFormAndReturnErrorMessageArray(data);

        if (errorMessage.length === 0) {

            if (!checkForUniqueValeInGrid("emailId", data.emailId)) {
                errorMessage.push("Email already present");
            }
            if (!checkForUniqueValeInGrid("phone", data.phone)) {
                errorMessage.push("Phone already present");
            }
            if (errorMessage.length === 0) {
                let grid = $('#grdContactsList').data('kendoGrid');
                grid.dataSource.insert(data);
                grid.dataSource.sync();
                clearContactForm();
                //close add contact window
                $('#pnlAddContact').data('kendoWindow').close();
                //open sucess dialog
                $("#dlgAddContactSuccess").data('kendoDialog').content('Contact Added Succefully!').open();
            } else {
                $("#dlgAddContactFailure").data('kendoDialog').content(errorMessage[0]).open();
            }

        } else {
            if (errorMessage.length > 2) {
                $("#dlgAddContactFailure").data('kendoDialog').content("Please Enter All form fields").open();
            } else {
                $("#dlgAddContactFailure").data('kendoDialog').content(errorMessage[0]).open();
            }
            errorMessage = [];
        }
    }

    function checkForUniqueValeInGrid(fieldName, value, idToIgnore) {

        let grid = $('#grdContactsList').data('kendoGrid');
        let allRows = grid.dataSource.data();

        var foundItems = allRows.find(item => item[fieldName].toString() === value);
        if (foundItems === undefined) {
            return true;
        } else if (foundItems.uid === idToIgnore) {
            return true;
        } else {
            return false;
        }
    }

    function clearContactForm() {
        let formObj = $('#pnlAddContact');
        formObj.find('input').val("");
        $('#ddlAddContactState').data('kendoDropDownList').dataSource.data([]);
    }

    /*
      function to check and return form validity
      parameter - form jquery object
      return(boolean) - true if valid false if invalid
    */
    function checkFormValidity(form) {

        let allInputs = form.find("input");
        let validity = true;

        let length = allInputs.length;
        for (let i = 0; i < length; i++) {
            if (!allInputs[i].checkValidity()) {
                validity = false;
                break;
            }
        }
        return validity;
    }

    /*
      function to extract and return all data from form
      parameter - form jquery object
      return(array) - form data in object pushed inside array
    */
    function getAllDataFromForm(form) {
        let allFormFields = form.find(".form-field");

        let valuesObj = {};
        let length = allFormFields.length;
        for (let i = 0; i < length; i++) {
            let formField = allFormFields[i];
            let formFieldInput = $(formField).find('input, select')
            let formFieldInputText = $(formFieldInput).val();
            let formFieldName = $(formFieldInput).attr('name');

            if (formFieldName === 'dob') {
                valuesObj[formFieldName] = $('#dtpAddContactDateOfBirth').data('kendoDatePicker').value();
            } else {
                valuesObj[formFieldName] = formFieldInputText;
            }
        }
        return valuesObj;
    }

    //bind each row click with update contact logic
    function grdContactsList_dataBound() {
        let grid = this;
        grid.element.on("click", 'tbody tr[data-uid]', function (event) {

            let row = event.currentTarget;

            if (!$(event.target).hasClass('k-checkbox')) {
                openUpdateContactWindow(row);
            }
        });
    }

    //open update contact window
    function openUpdateContactWindow(row) {

        //set title and open window
        $('#pnlAddContact').data('kendoWindow').title("Update Contact").center().open();

        let grid = $('#grdContactsList').data('kendoGrid');
        grid.clearSelection();
        grid.select(row);

        let data = grid.dataItem(row);
        let formFields = $('#pnlAddContact').find('input');

        $.each(formFields, function (index) {
            let inputData = data[$(formFields[index]).attr('name')]
            $(formFields[index]).val(inputData);
        });

        $('#dtpAddContactDateOfBirth').data('kendoDatePicker').value(data['dob']);

        //select country programatically first then select proper state
        let stateName = data['state'];
        selectCountry(data['country']);

        function selectCountry(value) {
            $('#ddlAddContactCountry').val(value, initializeUpdateContactStates(value, stateName));
        }

        //hide the submit button
        $('#btnContactFormSubmit').hide()
        $('#btnContactFormUpdate').show();
    }

    function validateFormAndReturnErrorMessageArray(data) {
        let errorMessage = [];
        let dateObjToday = (new Date());
        let before18Year = dateObjToday.getFullYear() - 18;

        //date of birth input date for only 18+
        let leagalDateBefore = new Date(before18Year, dateObjToday.getDate());

        if (data.firstName.trim() === "") {
            errorMessage.push("First name cannot be empty")

        }
        if (data.lastName.trim() === "") {
            errorMessage.push("Last name cannot be empty")
        }
        if (data.dob === undefined || isNaN(data.dob.getTime())) {
            errorMessage.push("Enter proprer date of birth")
        } else if (data.dob > leagalDateBefore) {
            errorMessage.push("Age must be greater or eqal to 18 years")
        }

        if (data.country.trim() === "") {
            errorMessage.push("Country cannot be empty")
        }

        if (data.emailId.trim() === "") {
            errorMessage.push("Email Id cannot be empty")
        }
        if (data.phone.toString().trim() === "") {
            errorMessage.push("Phone cannot be empty")
        }

        return errorMessage;
    }

    //update contact btn click
    function btnContactFormUpdate_click(event) {

        let grid = $('#grdContactsList').data('kendoGrid');
        let formObj = $('#pnlAddContact');
        let data = getAllDataFromForm(formObj);
        let selectedRow = grid.select();
        //let selectedIndex = selectedRow.index();
        let currentRow = grid.dataItem(selectedRow);

        let errorMessage = validateFormAndReturnErrorMessageArray(data);


        // if (checkFormValidity(formObj)) {
        if (errorMessage.length === 0) {

            if (!checkForUniqueValeInGrid("emailId", data.emailId, currentRow.uid)) {
                errorMessage.push("Email already present");
            }
            if (!checkForUniqueValeInGrid("phone", data.phone, currentRow.uid)) {
                errorMessage.push("Phone already present");
            }
            if (errorMessage.length === 0) {
                for (property in data) {
                    currentRow.set(property, data[property]);
                }
                grid.dataSource.sync();
                //clear form
                clearContactForm();

                //close add contact window
                $('#pnlAddContact').data('kendoWindow').close();

                //open sucess dialog
                $("#dlgAddContactSuccess").data('kendoDialog').content("Contact updated Succesfully!").open();

            } else {
                $("#dlgAddContactFailure").data('kendoDialog').content(errorMessage[0]).open();
            }

        } else {
            if (errorMessage.length > 2) {
                $("#dlgAddContactFailure").data('kendoDialog').content("Please Enter All form fields").open();
            } else {
                $("#dlgAddContactFailure").data('kendoDialog').content(errorMessage[0]).open();
            }
            errorMessage = [];
        }
    }

    function btnGridFetch_click(event) {


        let dobFrom = $('#dtpFilterDateOfBirthFrom');
        dobFrom = dobFrom.val().split("-");
        let dobTo = $('#dtpFilterDateOfBirthTo');
        dobTo = dobTo.val().split("-");

        let grid = $('#grdContactsList').data('kendoGrid');

        let fromDateObj = $('#dtpFilterDateOfBirthFrom').data('kendoDatePicker').value()
        let toDateObj = $('#dtpFilterDateOfBirthTo').data('kendoDatePicker').value()
        let errorMessage = [];


        if (dobFrom.length !== 3) {
            if ($('#dtpFilterDateOfBirthFrom').val() === "") {
                errorMessage.push("From date should not be Empty");
            } else {
                errorMessage.push("Enter from date in proper format");
            }
        }
        if (dobTo.length !== 3) {
            if ($('#dtpFilterDateOfBirthTo').val() === "") {
                errorMessage.push("To date should not be Empty");
            } else {
                errorMessage.push("Enter to date in proper format");
            }
        }
        if (dobFrom.length === 3 && dobTo.length === 3) {
            if (!(fromDateObj.getTime() < toDateObj.getTime())) {
                errorMessage.push("From date should be less than to date");
            }
        }

        if (errorMessage.length === 0) {
            let filters = [
                { field: "dob", operator: "gte", value: fromDateObj },
                { field: "dob", operator: "lte", value: toDateObj }
            ]

            let fullName = $('#ddlFilterFullName').val().trim()
            let country = $('#ddlFilterCountry').data('kendoAutoComplete').value()
            let state = $('#ddlFilterState').data('kendoDropDownList').value()

            if (fullName !== "") {
                fullName = fullName.trim().split(" ");
                let firstName = fullName[0];
                let lastName = fullName[1];
                filters.push({ field: "firstName", operator: "eq", value: firstName });
                filters.push({ field: "lastName", operator: "eq", value: lastName });
            }

            if (country !== "") {
                filters.push({ field: "country", operator: "eq", value: country });
            }

            if (state !== "") {
                filters.push({ field: "state", operator: "eq", value: state });
            }

            let filterToBeApplied = {
                logic: 'and',
                filters: filters
            }
            grid.dataSource.filter(filterToBeApplied)

        } else {
            $("#dlgAddContactFailure").data('kendoDialog').content(errorMessage[0]).open();

        }
    }

    function btnGridClear_click(event) {

        //get 18 year back date
        let dateObjToday = (new Date());
        let before18Year = dateObjToday.getFullYear() - 18;
        let dateToday = dateObjToday.getDate();

        //clear to default
        $('#dtpFilterDateOfBirthTo').data("kendoDatePicker").value(new Date(before18Year, dateToday));
        $('#dtpFilterDateOfBirthFrom').data("kendoDatePicker").value(new Date(before18Year - 10, dateToday));
        $('#ddlFilterFullName').val("");
        $('#ddlFilterCountry').val("");
        let state = $('#ddlFilterState').data('kendoDropDownList');
        state.value("");
        state.dataSource.data([]);

        //reload grid
        let grid = $('#grdContactsList').data('kendoGrid');
        grid.dataSource.filter({});

        //fetch with default dates
        btnGridFetch_click();

    }

</script>